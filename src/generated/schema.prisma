generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String
  bio           String?
  emailVerified Boolean
  image         String
  createdAt     DateTime
  updatedAt     DateTime

  sessions Session[]
  accounts Account[]
  images   Image[]
  comments Comment[]
  likes    Like[]
  albums   Album[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Image {
  id          String   @id @default(uuid())
  userId      String
  albumId     String
  title       String
  description String?
  tags        String?
  filePath    String
  slug        String   @unique @default(uuid())
  metadata    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User  @relation(references: [id], fields: [userId], onDelete: Cascade)
  album Album @relation(references: [id], fields: [albumId], onDelete: Cascade)

  comments Comment[]
  likes    Like[]

  @@map("image")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  imageId   String
  userId    String
  createdAt DateTime @default(now())

  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Like {
  imageId String
  userId  String

  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([imageId, userId])
  @@unique([imageId, userId])
  @@map("like")
}

model Album {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  images Image[]

  @@map("album")
}
